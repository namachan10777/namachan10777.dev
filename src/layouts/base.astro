---
import EventBus from "@components/event-bus/event-bus.astro";
import Footer from "./components/footer.astro";
import Header from "./components/header.astro";
import SearchDialog from "./components/search-dialog.tsx";
import SiteNav from "./components/site-nav.astro";
import Head from "./head.astro";
import "./markdown.css";
import SidePane from "./components/side-pane.astro";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
const url = Astro.url;
const ogUrl = (() => {
  if (url.pathname === "/") {
    return "/index.webp";
  } else if (url.pathname.endsWith("/")) {
    return `${url.pathname.substring(0, url.pathname.length - 1)}.webp`;
  } else {
    return `${url.pathname}.webp`;
  }
})();
---

<html lang="ja" data-theme="default" class="min-h-full">
  <Head title={title} description={description} ogUrl={ogUrl} />
  <body class="relative h-full min-h-full" data-pagefind-body>
    <EventBus id="main-bus" />
    <SearchDialog client:load />
    <div class="root-container">
      <div class="sticky top-0 h-dvh hidden md:block">
        <SidePane />
      </div>
      <div>
        <div class="sticky top-0 z-10 md:hidden">
          <Header title={title} />
        </div>
        <div
          id="site-nav"
          class="md:hidden translate-x-full fixed top-12 right-0 z-10 transition-transform"
        >
          <SiteNav />
        </div>
        <main
          id="scrollable-content"
          class="flex flex-col justify-between h-full min-h-[calc(100dvh_-_3rem)] md:w-[calc(100dvw_-_20rem)]"
        >
          <slot />
          <Footer />
        </main>
      </div>
    </div>
    <script>
      import { EventBus } from "@components/event-bus/event-bus-client";

      const siteNav = document.getElementById("site-nav");
      const scrollableContent = document.getElementById("scrollable-content");
      const bus = new EventBus("main-bus");

      if (siteNav && scrollableContent) {
        bus.subscribe("nav-open", () => {
          siteNav.classList.add("site-nav-open");
          bus.emit({ type: "background-fix" });
        });

        bus.subscribe("nav-close", () => {
          siteNav.classList.remove("site-nav-open");
          bus.emit({ type: "background-release" });
        });

        bus.subscribe("background-fix", () => {
          const scrollHeight = window.scrollY;
          scrollableContent.style.position = "fixed";
          scrollableContent.style.transform = `translateY(-${scrollHeight}px)`;
          scrollableContent.dataset.scroll = scrollHeight.toString();
        });

        bus.subscribe("background-release", () => {
          scrollableContent.style.position = "unset";
          scrollableContent.style.transform = "unset";
          if (scrollableContent.dataset.scroll) {
            const scrollHeight = parseInt(scrollableContent.dataset.scroll, 10);
            window.scroll({ behavior: "instant", top: scrollHeight });
          }
        });
      }

      const main = document.querySelector("main");
      if (main) {
        console.log("toggled");
        main.addEventListener("click", () => {
          bus.emit({
            type: "nav-close",
          });
        });
      }
    </script>
    <style>
      @tailwind components;

      @layer components {
        .site-nav-open {
          @apply translate-x-0;
        }

        .root-container {
          @apply md:grid md:grid-cols-[20rem_1fr];
        }
      }
    </style>
  </body>
</html>
