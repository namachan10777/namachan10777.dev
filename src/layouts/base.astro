---
import Footer from "./components/footer.astro";
import Header from "./components/header.astro";
import SiteNav from "./components/site-nav.astro";
import { SEO } from "astro-seo";
import "./destyle.css";
import "./globals.css";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
const url = Astro.url;
const ogUrl = (() => {
  if (url.pathname === "/") {
    return "/index.webp";
  } else if (url.pathname.endsWith("/")) {
    return `${url.pathname.substring(0, url.pathname.length - 1)}.webp`;
  } else {
    return `${url.pathname}.webp`;
  }
})();
---

<html lang="ja" data-theme="default">
  <head>
    <SEO
      charset="UTF-8"
      twitter={{
        creator: "@namachan10777",
        card: "summary_large_image",
        site: "@namachan10777",
        title,
        image: new URL(ogUrl, Astro.url.origin).toString(),
        imageAlt: title,
        description,
      }}
      openGraph={{
        basic: {
          title: title,
          type: "article",
          image: new URL(ogUrl, Astro.url.origin).toString(),
        },
        image: {
          alt: title,
        },
      }}
    />
    <link rel="icon" type="image/vnd.microsoft.icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={Astro.props.description} />
    <title>{title}</title>
  </head>
  <body>
    <Header title="namachan10777.dev" />
    <SiteNav />
    <div id="scrollable-content">
      <main>
        <slot />
      </main>
      <Footer />
    </div>
    <div class="toaster">
      <div>
        <span>$</span>
        <span id="toaster-placeholder"></span>
      </div>
    </div>
    <script>
      const toggleNav = document.getElementById("toggle-nav") as HTMLElement & {
        addToggleEventListener: (
          listener: (ev: { target: HTMLElement; opened: boolean }) => void
        ) => void;
      };
      const siteNav = document.getElementById("site-nav");
      const scrollableContent = document.getElementById("scrollable-content");
      if (toggleNav && siteNav && scrollableContent) {
        customElements.whenDefined("hamburger-button").then(() => {
          toggleNav.addToggleEventListener(({ opened }) => {
            if (opened) {
              siteNav.dataset.show = true.toString();
              const scrollHeight = window.scrollY;
              scrollableContent.style.position = "fixed";
              scrollableContent.style.transform = `translateY(-${scrollHeight}px)`;
              scrollableContent.dataset.scroll = scrollHeight.toString();
            } else {
              siteNav.dataset.show = false.toString();
              scrollableContent.style.position = "unset";
              scrollableContent.style.transform = "unset";
              if (scrollableContent.dataset.scroll) {
                const scrollHeight = parseInt(
                  scrollableContent.dataset.scroll,
                  10
                );
                window.scroll({ behavior: "instant", top: scrollHeight });
              }
            }
          });
        });
      }

      function pathSections(path: string): string[] {
        let inner = path;
        if (inner.startsWith("/")) {
          inner = inner.slice(1);
        } else if (inner.endsWith("/")) {
          inner = inner.slice(0, -1);
        }
        if (inner.length === 0) {
          return [];
        } else {
          return inner.split("/");
        }
      }

      function countCommonPrefix(path1: string[], path2: string[]): number {
        let i = 0;
        for (; i < Math.min(path1.length, path2.length); ++i) {
          if (path1[i] !== path2[i]) {
            return i;
          }
        }
        return i;
      }

      function cmdMessage(): string {
        if (document.referrer === "") {
          return "ls";
        }
        const from = new URL(document.referrer);
        const here = window.location;
        if (from.host !== here.host) {
          return `cd ${here.href}`;
        }
        const fromPath = pathSections(from.pathname);
        const herePath = pathSections(here.pathname);
        const commonLength = countCommonPrefix(fromPath, herePath);
        const backCount = fromPath.length - commonLength;
        const forwardCount = herePath.length - commonLength;
        if (backCount == 0 && forwardCount == 0) {
          return "ls";
        }
        let relPath = [];
        for (let i = 0; i < backCount; ++i) {
          relPath.push("..");
        }
        for (let i = 0; i < forwardCount; ++i) {
          relPath.push(herePath[commonLength + i]);
        }
        return `cd ${relPath.join("/")}`;
      }

      window.addEventListener("load", () => {
        const toasterPlaceholder = document.getElementById(
          "toaster-placeholder"
        );
        if (toasterPlaceholder) {
          toasterPlaceholder.textContent = cmdMessage();
        }
      });

      const main = document.querySelector("main");
      const hamburger = document.querySelector("hamburger-button") as
        | ({ setToggled: (toggled: boolean) => void } & Element)
        | null;
      if (main && hamburger) {
        console.log("toggled");
        main.addEventListener("click", () => {
          hamburger.setToggled(true);
        });
      }
    </script>

    <style>
      body {
        position: relative;
      }

      #scrollable-content {
        width: 100%;
      }

      .toaster {
        position: fixed;
        right: 0;
        bottom: 0;
        padding: 0.5rem;
        min-width: 10rem;
        border-top: 1px solid var(--color-text-normal);
        border-left: 1px solid var(--color-text-normal);
        background-color: var(--color-bg);
        animation-fill-mode: forwards;
        animation-delay: 5s;
        animation-duration: 1s;
        animation-timing-function: linear;
        animation-name: toaster;
        font-family: var(--mono-family);
      }

      @keyframes toaster {
        0% {
          transform: translateY(0);
        }

        100% {
          transform: translateY(10rem);
        }
      }

      .cursor {
        height: 1rem;
        width: 0.5rem;
        display: inline-block;
        animation: 0.7s linear blink-cursor infinite;
      }

      @keyframes blink-cursor {
        0% {
          background-color: var(--color-bg);
        }

        50% {
          background-color: var(--color-text-normal);
        }
      }

      h1 {
        font-size: var(--font-size-xl);
        font-weight: bold;
      }

      main {
        min-height: calc(100vh - 3rem - 3rem);
      }
    </style>
  </body>
</html>
