---
import Header from "./components/header.astro";
import SiteNav from "./components/site-nav.astro";
import "./destyle.css";
import "./globals.css";

interface Props {
  title: string;
  description: string;
}

const { title } = Astro.props;
---

<html lang="ja" data-theme="default">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/vnd.microsoft.icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={Astro.props.description} />
    <title>{title}</title>
  </head>
  <body>
    <Header title="namachan10777.dev" />
    <SiteNav />
    <main>
      <slot />
    </main>
    <div class="toaster">
      <div>
        <span>$</span>
        <span id="toaster-placeholder"></span>
      </div>
      <div>
        <span>$</span>
        <span class="cursor"></span>
      </div>
    </div>
  </body>
</html>

<script>
  const toggleNav = document.getElementById("toggle-nav") as HTMLElement & {
    addToggleEventListener: (
      listener: (ev: { target: HTMLElement; opened: boolean }) => void,
    ) => void;
  };
  const siteNav = document.getElementById("site-nav");
  if (toggleNav && siteNav) {
    customElements.whenDefined("hamburger-button").then(() => {
      toggleNav.addToggleEventListener(({ opened }) => {
        if (opened) {
          siteNav.dataset.show = true.toString();
        } else {
          siteNav.dataset.show = false.toString();
        }
      });
    });
  }

  function pathSections(path: string): string[] {
    const inner = /^\/?(.*)\/?$/.exec(path);
    if (inner && inner[1]) {
      if (inner[1].length === 0) {
        return [];
      } else {
        return path.slice(1).split("/");
      }
    } else {
      return [];
    }
  }

  function countCommonPrefix(path1: string[], path2: string[]): number {
    let i = 0;
    for (; i < Math.min(path1.length, path2.length); ++i) {}
    return i;
  }

  function cmdMessage(): string {
    if (document.referrer === "") {
      return "ls";
    }
    const from = new URL(document.referrer);
    const here = window.location;
    if (from.host !== here.host) {
      return `cd ${here.href}`;
    }
    const fromPath = pathSections(from.pathname);
    const herePath = pathSections(here.pathname);
    const commonLength = countCommonPrefix(fromPath, herePath);
    const backCount = fromPath.length - commonLength;
    const forwardCount = herePath.length - commonLength;
    if (backCount == 0 && forwardCount == 0) {
      return "ls";
    }
    let relPath = [];
    for (let i = 0; i < backCount; ++i) {
      relPath.push("..");
    }
    for (let i = 0; i < forwardCount; ++i) {
      relPath.push(herePath[commonLength + i]);
    }
    return `cd ${relPath.join("/")}`;
  }

  window.addEventListener("load", () => {
    const toasterPlaceholder = document.getElementById("toaster-placeholder");
    if (toasterPlaceholder) {
      toasterPlaceholder.textContent = cmdMessage();
    }
  });

  const main = document.querySelector("main");
  const hamburger = document.querySelector("hamburger-button") as
    | ({ setToggled: (toggled: boolean) => void } & Element)
    | null;
  if (main && hamburger) {
    console.log("toggled");
    main.addEventListener("click", () => {
      hamburger.setToggled(true);
    });
  }
</script>

<style>
  body {
    position: relative;
  }

  .toaster {
    position: fixed;
    right: 0;
    bottom: 0;
    padding: 0.5rem;
    min-width: 10rem;
    border-top: 1px solid var(--color-text-normal);
    border-left: 1px solid var(--color-text-normal);
    background-color: var(--color-bg);
    animation-fill-mode: forwards;
    animation-delay: 5s;
    animation-duration: 1s;
    animation-timing-function: linear;
    animation-name: toaster;
    font-family: var(--mono-family);
  }

  @keyframes toaster {
    0% {
      transform: translateY(0);
    }

    100% {
      transform: translateY(10rem);
    }
  }

  .cursor {
    height: 1rem;
    width: 0.5rem;
    display: inline-block;
    animation: 0.7s linear blink-cursor infinite;
  }

  @keyframes blink-cursor {
    0% {
      background-color: var(--color-bg);
    }

    50% {
      background-color: var(--color-text-normal);
    }
  }

  h1 {
    font-size: var(--font-size-xl);
    font-weight: bold;
  }
</style>
