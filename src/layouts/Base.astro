---
import { SEO } from "astro-seo";
import { ViewTransitions } from "astro:transitions";
import Breadcrumbs from "@components/composite/breadcrumbs.astro";
import "./global.css";
import "./katex.css";

interface OgArticle {
  type: "article";
  tags?: string[];
  images?: string[];
  createdAt: Date;
  modifiedAt?: Date;
}

interface OgWebsite {
  type: "website";
}

export type Og = OgArticle | OgWebsite;

export interface PathFragment {
  absolute: string;
  display:
    | string
    | {
        icon: string;
        name: string;
      };
}

export interface Props {
  title: string;
  description: string;
  imagePath: string;
  og: Og;
  path: PathFragment[];
}

function articleJsonLD(article: OgArticle): string {
  return JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Article",
    headline: Astro.props.title,
    image: article.images?.map((path) => `${Astro.site!.origin}${path}`),
    datePublished: article.createdAt.toISOString(),
    dateModified: article.modifiedAt?.toISOString(),
    author: [
      {
        "@type": "Person",
        name: "Masaki Nakano",
        url: Astro.site,
      },
    ],
  });
}

function breadcrumbsJsonLD(path: PathFragment[]): string {
  return JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    itemListElement: path.map((fragment, idx) => ({
      "@type": "ListItem",
      position: idx + 1,
      item: {
        "@type": "ListItem",
        "@id": `${Astro.site!.origin}${fragment.absolute}`,
        name:
          typeof fragment.display === "string"
            ? fragment.display
            : fragment.display.name,
      },
    })),
  });
}
---

<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" href="/favicon.ico" type="image/vnd.microsoft.icon" />
    <style is:inline>
      @layer reset, component, patch;
    </style>
    <slot name="head" />
    <SEO
      title={Astro.props.title}
      description={Astro.props.description}
      twitter={{
        card: "summary_large_image",
        creator: "@namachan10777",
        title: Astro.props.title,
        description: Astro.props.description,
        site: "@namachan10777",
        image: `${Astro.site}${Astro.props.imagePath}`,
      }}
      openGraph={{
        basic: {
          title: Astro.props.title,
          type: Astro.props.og.type,
          image: `${Astro.site}${Astro.props.imagePath}`,
        },
        optional: {
          description: Astro.props.description,
          siteName: "www.namachan10777.dev",
        },
        article:
          Astro.props.og.type === "article"
            ? {
                tags: Astro.props.og.tags,
              }
            : undefined,
      }}
    />
    {
      Astro.props.og.type === "article" && (
        <script
          is:inline
          type="application/ld+json"
          set:html={articleJsonLD(Astro.props.og)}
        />
      )
    }
    <script
      is:inline
      type="application/ld+json"
      set:html={breadcrumbsJsonLD(Astro.props.path)}
    />
    <ViewTransitions />
  </head>
  <body>
    <div class="body-inner">
      <header>
        <Breadcrumbs path={Astro.props.path} />
      </header>
      <main>
        <slot />
      </main>
      <footer><span>Â©2020-2024 Masaki Nakano</span></footer>
    </div>
    <style>
      @layer reset, component, patch;

      @layer component {
        body {
          display: flex;
          flex-direction: column;
          align-items: center;
          padding-inline: 1.5rem;
          font-family: var(--font-sans-serif);
        }

        @media screen and (width >= 640px) {
          .body-inner {
            width: 60%;
            max-width: 60%;
          }
        }

        header {
          height: var(--header-height);
          width: 100%;
          display: flex;
          flex-direction: row;
          align-items: center;
          justify-content: space-between;
          border-bottom: 0.5px solid var(--fg-hr);
        }

        main {
          min-height: calc(100vh - var(--header-height) - var(--footer-height));
          padding-block-start: 2rem;
          display: flex;
          flex-direction: column;
          gap: 1rem;
          max-width: calc(100vw - 3rem);
        }

        footer {
          height: var(--footer-height);
          width: 100%;
          display: flex;
          flex-direction: row;
          align-items: center;
          justify-content: center;
          border-top: 0.5px solid var(--fg-hr);
          font-size: var(--font-size-sm);
          color: var(--fg-weak);
        }
      }
    </style>
  </body>
</html>
