---
import Heading1 from '../components/heading/Heading1.astro';
import Tag from '../components/Tag.astro';
import Base from './Base.astro';

interface Props {
  title: string;
  description: string;
  date: Date;
  tags?: string[];
}

const { title, description, date, tags = [] } = Astro.props;
const formattedDate = new Intl.DateTimeFormat('ja-JP', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
}).format(date);

// OGP画像のURLを生成
const ogImageURL = new URL(`/post/${Astro.params.slug}.png`, Astro.site).toString();
---

<Base title={title} description={description} image={ogImageURL} article={true}>
  <article>
    <header>
      <Heading1>{title}</Heading1>
      <div class="metadata">
        <time datetime={date.toISOString()}>{formattedDate}</time>
        {
          tags.length > 0 && (
            <div class="tags">
              {tags.map(tag => (
                <Tag tag={tag} />
              ))}
            </div>
          )
        }
      </div>
    </header>
    <div class="content-body">
      <slot />
    </div>
  </article>
</Base>

<style>
  article {
    margin-block: var(--space-xl);
  }

  .content-body {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }

  time {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  h1 {
    margin-block-end: var(--space-xs);
  }

  .metadata {
    color: rgb(var(--gray));
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-md);
    margin-block-end: var(--space-md);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
  }

  .tag {
    background-color: rgba(var(--gray-light), var(--opacity-high));
    padding-block: var(--space-2xs);
    padding-inline: var(--space-xs);
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-xs);
  }
</style>
