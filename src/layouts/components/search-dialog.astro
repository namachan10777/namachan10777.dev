---
import { Icon } from "astro-icon/components";
---

<search-dialog
  class="fixed left-0 top-0 -z-50 hidden h-dvh w-dvw flex-col items-center backdrop-blur-sm"
>
  <div
    class="background-screen absolute left-0 top-0 h-full w-full bg-[rgba(0,0,0,30%)]"
  >
  </div>
  <dialog
    class="my-8 flex w-11/12 flex-col gap-4 rounded bg-white p-4 md:my-[20dvh] md:w-7/12"
  >
    <div class="flex flex-row items-center gap-2">
      <Icon name="material-symbols:search" class="text-3xl" />
      <input
        type="text"
        class="w-full focus:outline-none"
        aria-label="検索する単語を入力してください"
        value=""
        placeholder="search..."
      />
      <button id="close-search-dialog" aria-label="検索ウィンドウを閉じる">
        <Icon name="material-symbols:cancel" class="text-3xl" />
      </button>
    </div>
    <ol
      id="candidate-list"
      class="flex max-h-96 flex-col gap-4 overflow-scroll"
    >
    </ol>
  </dialog>
</search-dialog>

<script>
  import { EventBus } from "@components/event-bus/event-bus-client";
  import { type PagefindApi, type Data, loadPagefind } from "./pagefind";

  function createCondidateItem(data: Data): HTMLLIElement {
    const li = document.createElement("li");
    const title = document.createElement("a");
    title.classList.add("text-lg", "underline", "font-bold");
    title.href = data.url;
    const preview = document.createElement("p");
    preview.innerHTML = data.excerpt;
    preview.classList.add("text-gray-600");
    title.textContent = data.meta.title;
    li.appendChild(title);
    li.appendChild(preview);
    return li;
  }

  class SearchDialog extends HTMLElement {
    pagefind?: PagefindApi;
    list: HTMLOListElement;

    updateList(results: Data[]) {
      const items = results.map(createCondidateItem);
      const newList = this.list.cloneNode(false) as HTMLOListElement;
      for (const item of items) {
        newList.appendChild(item);
      }
      this.list.parentNode?.replaceChild(newList, this.list);
      this.list = newList;
    }

    constructor() {
      super();
      const bus = new EventBus("main-bus");
      const dialog = this.querySelector("dialog");
      const screen = this.querySelector(".background-screen");
      const input = this.querySelector("input");
      const list = this.querySelector("ol");
      const closeButton = document.getElementById("close-search-dialog");

      loadPagefind().then((pagefind) => {
        pagefind.init().then(() => {
          this.pagefind = pagefind;
        });
      });
      if (input && dialog && screen && list && closeButton) {
        this.list = list;
        let timeout: NodeJS.Timeout | null = null;
        let beforeExecuted = Date.now();
        closeButton.addEventListener("click", () => {
          bus.emit({ type: "search-off" });
        });
        input.addEventListener("input", () => {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          if (input.value === "") {
            this.updateList([]);
          } else if (Date.now() - beforeExecuted > 300) {
            beforeExecuted = Date.now();
            this.pagefind?.search(input.value).then(async (response) => {
              const items = await Promise.all(
                response.results.map((result) => result.data()),
              );
              this.updateList(items);
            });
          } else {
            timeout = setTimeout(() => {
              this.pagefind?.search(input.value).then(async (response) => {
                const items = await Promise.all(
                  response.results.map((result) => result.data()),
                );
                this.updateList(items);
              });
            }, 300);
          }
        });

        let opened = false;

        document.body.addEventListener("keydown", (e) => {
          if (e.key === "Escape") {
            bus.emit({ type: "search-off" });
          }
          if (e.key === "k" && e.metaKey) {
            if (opened) {
              bus.emit({ type: "search-off" });
            } else {
              bus.emit({ type: "search-on" });
            }
          }
        });

        screen.addEventListener("click", () => {
          bus.emit({ type: "search-off" });
        });

        bus.subscribe("search-off", () => {
          opened = false;
          bus.emit({ type: "free-background" });
          this.classList.remove("flex");
          this.classList.add("hidden");

          this.classList.remove("z-20");
          this.classList.add("-z-50");
          input.value = "";
          this.updateList([]);
        });

        bus.subscribe("search-on", () => {
          opened = true;
          bus.emit({ type: "fix-background" });

          this.classList.remove("hidden");
          this.classList.add("flex");

          this.classList.remove("-z-50");
          this.classList.add("z-20");

          dialog.show();
          input.focus();
        });
      } else {
        throw new Error("invalid dom");
      }
    }
  }

  customElements.define("search-dialog", SearchDialog);
</script>
