---
import { Icon } from "astro-icon/components";
export interface Props {
  style?: {
    "--shiki-dark": string;
    "--shiki-light": string;
    "--shiki-dark-bg": string;
    "--shiki-light-bg": string;
  };
}
---

<code-block class="root">
  <button class="copy-button">
    <span class="copy-message">copy</span>
    <Icon name="iconoir:copy" class="copy-icon" />
  </button>
  <pre><slot /></pre>
</code-block>

<script>
  class CodeBlock extends HTMLElement {
    constructor() {
      super();
      const button = this.querySelector(".copy-button")!;
      const pre = this.querySelector("pre")!;
      const message = this.querySelector(".copy-message")!;
      let timeout: undefined | number;

      button.addEventListener("click", () => {
        navigator.clipboard.writeText(pre.textContent!).then(() => {
          message.textContent = "copied!";
          if (timeout) clearTimeout(timeout);
          timeout = window.setTimeout(() => {
            message.textContent = "copy";
          }, 1000);
        });
      });
    }
  }

  customElements.define("code-block", CodeBlock);
</script>
<style define:vars={Astro.props.style ? {
  'shiki-light': Astro.props.style['--shiki-light'],
  'shiki-dark': Astro.props.style['--shiki-dark'],
  'shiki-light-bg': Astro.props.style['--shiki-light-bg'],
  'shiki-dark-bg': Astro.props.style['--shiki-dark-bg'],
} : {}}>
  @layer component {
    .root {
      display: block;
      position: relative;
    }

    .copy-button {
      position: absolute;
      top: 0;
      right: 0;
      padding: 0.5rem;
      color: var(--fg-weak);
      border: none;
      cursor: pointer;
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 0.5rem;
    }

    .copy-message {
      opacity: 0;
      padding: 0.5rem;
      border-radius: 0.2rem;
      background-color: var(--bg-codeblock);
      transition: opacity 0.1s;
      font-weight: bold;
    }

    .copy-icon {
      font-size: var(--font-size-2xl);
      transition: transform 0.1s;
    }

    .copy-button:hover > .copy-message {
      opacity: 1;
    }

    .copy-button:hover > .copy-icon {
      transform: scale(1.1);
    }

    pre {
      background-color: var(--bg-codeblock);
      overflow-x: scroll;
      font-size: var(--font-size-sm);
    }

    pre :global(code) {
      counter-reset: line;
    }

    pre :global(code) :global(span[data-line])::before {
      counter-increment: line;
      content: counter(line);
      margin-right: 1rem;
      display: inline-block;
      text-align: right;
      color: var(--fg-linenum);
      width: 3rem;
    }

    pre {
      color: var(--shiki-light);
      background-color: var(--shiki-light-bg);
    }

    pre :global(span) {
      color: var(--shiki-light);
    }
  }
  @layer patch {
    pre > :global(code) {
      background-color: inherit;
      padding: 0;
    }
  }
</style>
