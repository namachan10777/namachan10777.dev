<script
  is:inline
  src="https://giscus.app/client.js"
  data-repo="namachan10777/namachan10777.dev"
  data-repo-id="MDEwOlJlcG9zaXRvcnkxMTEzOTQ4NzE="
  data-category="Q&A"
  data-category-id="DIC_kwDOBqPAN84CgHHl"
  data-mapping="og:title"
  data-strict="0"
  data-reactions-enabled="1"
  data-emit-metadata="1"
  data-input-position="bottom"
  data-theme="light"
  data-lang="ja"
  data-loading="lazy"
  crossorigin="anonymous"
  async></script>

<script>
  import type { Theme, ThemeAdapter, ThemeProvider } from "~/lib/theme";
  const giscusTheme: { [key in Theme]: string } = {
    light: "light",
    dark: "dark",
  };

  await customElements.whenDefined("theme-switcher");
  const provider = document.querySelector(
    "theme-switcher",
  )! as unknown as ThemeProvider;

  class GiscusAdapter implements ThemeAdapter {
    #giscus: HTMLIFrameElement | null = null;
    #initialized = false;
    #theme: Theme | null = null;

    #sendThemeToGiscus() {
      if (this.#giscus === null) {
        this.#giscus = document.querySelector("iframe.giscus-frame")!;
      }
      if (this.#giscus && this.#theme) {
        this.#giscus.contentWindow?.postMessage(
          { giscus: { setConfig: { theme: giscusTheme[this.#theme] } } },
          "https://giscus.app",
        );
        this.#initialized = true;
      }
    }

    init(theme: Theme): void {
      this.#theme = theme;

      window.addEventListener("message", (event) => {
        if (event.origin !== "https://giscus.app") return;
        if (!this.#initialized) {
          this.#sendThemeToGiscus();
        }
      });
    }

    apply(theme: Theme): void {
      this.#theme = theme;
      this.#sendThemeToGiscus();
    }
  }

  provider.register(new GiscusAdapter());
</script>
