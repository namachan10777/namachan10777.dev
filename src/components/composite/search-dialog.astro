---
import { Icon } from "astro-icon/components";
---

<search-dialog>
  <dialog>
    <search class="contents-root">
      <search class="search-box">
        <Icon name="iconoir:search" class="search-icon" />
        <input type="text" class="text-input" />
        <button class="close-button">
          <Icon name="iconoir:xmark" class="close-icon" />
        </button>
      </search>
      <nav class="founds-container">
        <ul class="founds"></ul>
      </nav>
    </search>
  </dialog>
</search-dialog>

<style>
  .contents-root {
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    gap: 2rem 1rem;
  }

  .search-box {
    display: contents;
    width: 100%;
  }

  .search-icon {
    font-size: var(--font-size-2xl);
    color: var(--fg-strong);
  }

  .close-icon {
    font-size: var(--font-size-2xl);
    color: var(--fg-strong);
  }

  .close-button {
    opacity: 0.7;
    width: 1.5rem;
    height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.1s;
  }

  .close-button:hover {
    opacity: 1;
  }

  .text-input {
    height: 2rem;
    color: var(--fg-normal);
    width: 100%;
    border-bottom: solid var(--fg-hr) 1px;
  }

  .text-input:focus {
    border-bottom: solid var(--fg-weak) 1px;
  }

  .founds-container {
    grid-column-start: 2;
    overflow-y: scroll;
    max-height: calc(100vh - 12rem);
  }

  @media screen and (width <= 768px) {
    .founds-container {
      grid-column: 1 / 4;
    }
  }

  .founds {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding-block: 1rem;
  }

  .founds :global(li) {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .founds :global(.found-title) {
    font-size: var(--font-size-lg);
    color: var(--fg-link);
    font-weight: bold;
    text-decoration: underline;
  }

  .founds :global(.found-excerpt) {
    font-size: var(--font-size-sm);
    color: var(--fg-weak);
  }

  .founds :global(mark) {
    background-color: var(--bg-mark);
  }

  dialog {
    padding: 1rem;
    background-color: var(--bg);
    border: solid var(--fg-normal) 1px;
    margin-top: 4rem;
    margin-inline: 1rem;
    width: 100%;
  }

  @media screen and (width >= 768px) {
    dialog {
      width: 50%;
      margin-inline: auto;
    }
  }

  dialog::backdrop {
    backdrop-filter: blur(5px);
  }
</style>

<script>
  import type { SearchDialog } from "~/lib/search-dialog";
  import type { Pagefind } from "~/lib/pagefind";

  class SearchDialogElement extends HTMLElement implements SearchDialog {
    readonly #dialog: HTMLDialogElement;
    #scrollY = 0;
    readonly #textInput: HTMLInputElement;
    #pagefind: Pagefind | null = null;
    #founds: HTMLUListElement;

    constructor() {
      super();
      this.#dialog = this.querySelector("dialog")!;
      this.#textInput = this.querySelector(
        "input.text-input",
      )! as HTMLInputElement;
      this.#founds = this.querySelector("ul.founds")!;
      this.#setupDialogCloseHandler();
      this.#setupInputHandler();
      (async () => {
        const pagefind = (await import(
          /* @vite-ignore */
          `${"/pagefind/pagefind.js?url"}`
        )) as unknown as Pagefind;
        await pagefind.init();
        this.#pagefind = pagefind;
      })();
    }

    #setupInputHandler() {
      this.#textInput.addEventListener("input", (event) => {
        const target = event.target as HTMLInputElement;
        if (this.#pagefind) {
          this.#pagefind.debouncedSearch(target.value).then(async (founds) => {
            if (founds) {
              const pages = await Promise.all(
                founds.results.map((found) => found.data()),
              );
              const elements = pages.map((page) => {
                const title = document.createElement("a");
                title.textContent = page.meta.title;
                title.href = page.url;
                title.classList.add("found-title");

                const excerpt = document.createElement("p");
                excerpt.classList.add("found-excerpt");
                excerpt.innerHTML = page.excerpt;

                const li = document.createElement("li");
                li.appendChild(title);
                li.appendChild(excerpt);
                return li;
              });
              this.#founds.replaceChildren(...elements);
            }
          });
        }
      });
    }

    #setupDialogCloseHandler() {
      this.#dialog.addEventListener("click", (event) => {
        const target = event.target as HTMLElement | null;
        if (target && target.closest("search") === null) {
          this.close();
        }
      });

      this.#dialog.addEventListener("touchstart", (event) => {
        const target = event.target as HTMLElement | null;
        if (target && target.closest("search") === null) {
          this.close();
        }
      });

      this.#dialog.addEventListener("close", () => {
        this.#closeHandler();
      });

      const closeButton = this.querySelector("button.close-button")!;
      closeButton.addEventListener("click", () => {
        this.close();
      });
    }

    #closeHandler() {
      this.#textInput.value = "";
      this.#founds.replaceChildren();
      document.body.style.position = "";
      window.scrollTo({
        top: this.#scrollY,
        behavior: "instant",
      });
      document.body.style.overflow = "";
      document.body.style.top = "";
    }

    showModal(): void {
      this.#dialog.showModal();
      this.#scrollY = window.scrollY;
      document.body.style.overflowY = "scroll";
      document.body.style.position = "fixed";
      document.body.style.top = `-${this.#scrollY}px`;
    }

    close(): void {
      this.#dialog.close();
    }
  }

  customElements.define("search-dialog", SearchDialogElement);
</script>
