---
interface Props {
  id?: string;
}
---

<hamburger-button id={Astro.props.id} class="h-full">
  <button
    aria-label="グローバルナビゲーションを開く"
    aria-haspopup="menu"
    class="root"
  >
    <div class="bar top bg-black"></div>
    <div class="bar center bg-black"></div>
    <div class="bar bottom bg-black"></div>
  </button>
</hamburger-button>

<script>
  import { EventBus } from "@components/event-bus/event-bus";

  type Listener = (ev: { target: HamburgetButton; opened: boolean }) => void;

  class HamburgetButton extends HTMLElement {
    listeners: Listener[];
    button: HTMLElement;
    iconRoot: Element;
    opened: boolean;

    constructor() {
      super();

      this.listeners = [];
      this.opened = false;

      const button = this.querySelector("button");
      const iconRoot = this.querySelector(".root");
      if (button && iconRoot) {
        this.button = button;
        this.iconRoot = iconRoot;
      } else {
        throw new Error("invalid DOM");
      }

      const bus = new EventBus("main-bus");
      bus.subscribe("nav-close", () => {
        this.iconRoot.classList.remove("open");
        this.button.ariaLabel = "グローバルナビゲーションを開く";
        this.opened = false;
      });

      bus.subscribe("nav-open", () => {
        this.iconRoot.classList.add("open");
        this.button.ariaLabel = "グローバルナビゲーションを閉じる";
        this.opened = true;
      });

      bus.subscribe("nav-toggle", () => {
        if (this.opened) {
          bus.emit({
            type: "nav-close",
          });
        } else {
          bus.emit({
            type: "nav-open",
          });
        }
      });

      this.button.addEventListener("click", () => {
        bus.emit({ type: "nav-toggle" });
      });
    }
  }

  customElements.define("hamburger-button", HamburgetButton);
</script>

<style>
  .root {
    @apply relative flex flex-row justify-center items-center h-full w-8;
  }

  .bar {
    @apply absolute h-[2px] rounded-[1px] w-6 top-[calc(50%_-_1px)] left-1 transition-[width,transform];
  }

  .open > .center {
    @apply w-0;
  }

  .top {
    @apply -translate-y-2;
  }

  .open > .top {
    @apply rotate-45 translate-y-0;
  }

  .bottom {
    @apply translate-y-2;
  }

  .open > .bottom {
    @apply -rotate-45 translate-y-0;
  }
</style>
