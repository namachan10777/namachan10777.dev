---
interface Props {
  sizeRem: number;
  id?: string;
}

const { sizeRem } = Astro.props;

const styleVars = {
  barLength: `${sizeRem * 0.8}rem`,
  left: `${sizeRem * 0.1}rem`,
  barSpace: `${(sizeRem / 2) * 0.5}rem`,
};
---

<hamburger-button id={Astro.props.id} class="h-full">
  <button
    aria-label="グローバルナビゲーションを開く"
    aria-haspopup="menu"
    class="root"
  >
    <div class="bar top bg-black"></div>
    <div class="bar center bg-black"></div>
    <div class="bar bottom bg-black"></div>
  </button>
</hamburger-button>

<script>
  import { Bus } from "@components/event-bus/event-bus";

  type Listener = (ev: { target: HamburgetButton; opened: boolean }) => void;

  class HamburgetButton extends HTMLElement {
    listeners: Listener[];
    button: HTMLElement;
    iconRoot: Element;
    opened: boolean;

    constructor() {
      super();

      this.listeners = [];
      this.opened = false;

      const button = this.querySelector("button");
      const iconRoot = this.querySelector(".root");
      if (button && iconRoot) {
        this.button = button;
        this.iconRoot = iconRoot;
      } else {
        throw new Error("invalid DOM");
      }

      const bus = new Bus("main-bus");
      bus.subscribe("nav-close", () => {
        this.iconRoot.classList.remove("open");
        this.button.ariaLabel = "グローバルナビゲーションを開く";
        this.opened = false;
      });

      bus.subscribe("nav-open", () => {
        this.iconRoot.classList.add("open");
        this.button.ariaLabel = "グローバルナビゲーションを閉じる";
        this.opened = true;
      });

      bus.subscribe("nav-toggle", () => {
        if (this.opened) {
          bus.emit({
            type: "nav-close",
          });
        } else {
          bus.emit({
            type: "nav-open",
          });
        }
      });

      this.button.addEventListener("click", () => {
        bus.emit({ type: "nav-toggle" });
      });
    }
  }

  customElements.define("hamburger-button", HamburgetButton);
</script>

<style define:vars={styleVars}>
  .root {
    position: relative;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 2rem;
  }

  .bar {
    position: absolute;
    height: 1px;
    border-radius: 0.5px;
    width: var(--barLength);
    left: var(--left);
    top: calc(50% - 0.5px);
    transition:
      width 0.1s linear,
      transform 0.1s linear;
  }

  .open > .center {
    width: 0;
  }

  .top {
    transform: translateY(calc(0rem - var(--barSpace)));
  }

  .open > .top {
    transform: rotate(45deg);
  }

  .bottom {
    transform: translateY(calc(0rem + var(--barSpace)));
  }

  .open > .bottom {
    transform: rotate(-45deg);
  }
</style>
