---
import { Icon } from 'astro-icon/components';

export interface Props {
  'data-language': string;
  'data-line-count': string;
}
const lineCount = parseInt(Astro.props['data-line-count'], 10);

const title = Astro.props['data-language'] || 'Unknown';
---

<code-block class="codeblock">
  <header>
    <span class="title">{title}</span>
    <button class="copy-button" data-clipboard-copied="false">
      <Icon class="copy-icon" name="iconoir:copy" />
      <Icon class="done-icon" name="iconoir:check" />
    </button>
  </header>
  <div class="content-container">
    <div class="line-number-column">
      {Array.from({ length: lineCount }).map((_, index) => <span>{index + 1}</span>)}
    </div>
    <pre><slot /></pre>
  </div>
</code-block>

<style>
  .codeblock :global(*) {
    font-family: var(--font-mono);
  }

  .content-container {
    display: grid;
    grid-template-columns: subgrid;
    grid-column: span 3;
  }

  .codeblock {
    border: 1px solid var(--uchu-yin-9);
    font-family: var(--font-mono);
    display: grid;
    grid-template-columns: auto 1fr;

    max-width: 48rem;
    margin-block: 0.5rem;
  }

  .line-number-column {
    display: grid;
    grid-template-columns: auto;
    padding-inline: 0.5rem;
    border-right: 1px solid var(--uchu-yin-9);
    text-align: right;
    user-select: none;
    border-top: solid 1px var(--uchu-yin-9);
  }

  pre {
    white-space: pre;
    overflow-x: scroll;
    padding-inline-start: 0.5rem;
    margin-block: 0;
    grid-column: 2 / 2;
    border-top: solid 1px var(--uchu-yin-9);
  }

  pre > :global(code) {
    overflow-x: scroll;
  }

  header {
    display: grid;
    grid-column: 2 / 2;
    grid-template-columns: 1fr auto;
  }

  .title {
    padding-inline-start: 0.5rem;
    color: var(--uchu-gray-9);
  }

  .copy-button {
    border: none;
    border-left: 1px solid var(--uchu-yin-9);
    background-color: var(--uchu-gray-1);
    font-size: large;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .copy-button :global(svg) {
  }

  .copy-icon {
    display: inline-block;
  }

  .done-icon {
    display: none;
  }

  [data-clipboard-copied='true'] .copy-icon {
    display: none;
  }

  [data-clipboard-copied='true'] .done-icon {
    display: inline-block;
  }
</style>

<script>
  class Codeblock extends HTMLElement {
    pre: HTMLPreElement | null;
    copyButton: HTMLButtonElement | null;
    timeout: NodeJS.Timeout | null;
    constructor() {
      super();
      this.pre = this.querySelector('pre');
      this.copyButton = this.querySelector('.copy-button');
      this.timeout = null;
      this.copyButton?.addEventListener('click', () => {
        this.onClick();
      });
      this.copyButton?.addEventListener('touchend', () => {
        this.onClick();
      });
    }

    onClick() {
      if (this.copyButton && this.pre && this.pre.textContent) {
        navigator.clipboard.writeText(this.pre.textContent);
        this.copyButton.dataset['clipboardCopied'] = 'true';
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
        this.timeout = setTimeout(() => {
          if (this.copyButton) {
            this.copyButton.dataset['clipboardCopied'] = 'false';
            this.timeout = null;
          }
        }, 1000);
      }
    }
  }

  customElements.define('code-block', Codeblock);
</script>
