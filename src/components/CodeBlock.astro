---
import { Icon } from 'astro-icon/components';
interface Props {}
---

<code-block>
  <button data-copy-done="false">
    <Icon class="icon do-copy" name="iconoir:copy" />
    <Icon class="icon done-copy" name="iconoir:check" />
  </button>
  <pre {...Astro.props}><slot /></pre>
</code-block>

<script lang="ts">
  class CodeBlock extends HTMLElement {
    text: string;
    clearDoneStatusHandler: NodeJS.Timeout | null = null;

    constructor() {
      super();
      const button = this.querySelector('button');
      this.text = this.querySelector('pre')?.textContent || '';
      if (button) {
        button.addEventListener('click', () => {
          navigator.clipboard.writeText(this.text);
          button.dataset.copyDone = 'true';
          console.log('done');
          if (this.clearDoneStatusHandler) {
            clearTimeout(this.clearDoneStatusHandler);
          }
          this.clearDoneStatusHandler = setTimeout(() => {
            button.dataset.copyDone = 'false';
          }, 700);
        });
      }
    }
  }

  customElements.define('code-block', CodeBlock);
</script>

<style>
  code-block {
    position: relative;
    display: block;

    --copy-icon-size: 1.2rem;
  }

  .icon {
    width: var(--copy-icon-size);
    height: var(--copy-icon-size);
  }

  .done-copy,
  .do-copy {
    display: none;
  }

  button[data-copy-done='true'] .done-copy {
    display: unset;
  }

  button[data-copy-done='false'] .do-copy {
    display: unset;
  }

  code-block button {
    position: absolute;
    top: 0;
    right: 0;
    color: rgb(var(--code-fg));
    border-radius: var(--border-radius-sm);
    cursor: pointer;
    background-color: transparent;
    z-index: 10;
    border: none;
    padding: var(--space-2xs);
  }

  /* コード */

  /* インラインコード用 - pre内にないcodeタグ */
  :not(pre) > :global(code) {
    padding-block: 0.2em;
    padding-inline: 0.4em;
    background-color: rgb(var(--code-bg));
    color: rgb(var(--code-fg));
    border-radius: var(--border-radius-sm);
    font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, monospace;
    font-size: 0.85em;
  }

  /* コードブロック用 - preタグのスタイリング */
  pre {
    padding: 1em;
    border-radius: var(--border-radius-lg);
    overflow-x: scroll;
    background-color: rgb(var(--codeblock-bg));
  }

  /* コードブロック内のコードタグはShikiによるスタイリングを優先 */
  pre > :global(code) {
    padding: 0;
    font-size: 0.9em;
    line-height: var(--line-height-normal);
    white-space: pre;
  }

  /* 行番号付きコードブロックのスタイル */
  pre[data-line-numbers='true'],
  pre[data-line-numbers='1'] {
    /* 行番号付きコードブロックのスタイルを追加 */
    position: relative;
  }

  /* 行番号のカウンターをリセット */
  pre[data-line-numbers='true'] :global(code),
  pre[data-line-numbers='1'] :global(code) {
    counter-reset: line;
  }

  /* 各行に行番号を追加 */
  pre[data-line-numbers='true'] :global(.line),
  pre[data-line-numbers='1'] :global(.line) {
    display: inline-block;
    width: 100%;
    height: 1rem;
    counter-increment: line;
  }

  pre[data-line-numbers='true'] :global(.line > span) {
    height: 100%;
  }

  /* 行番号の表示 */
  pre[data-line-numbers='true'] :global(.line::before),
  pre[data-line-numbers='1'] :global(.line::before) {
    display: inline-block;
    margin-right: 0.5rem;
    content: counter(line);
    height: 100%;
    width: 2.5em;
    text-align: right;
    color: rgb(var(--gray), var(--opacity-medium));
    font-size: 0.8em;
    padding-right: 0.5em;
    border-right: var(--border-width-thin) solid rgb(var(--gray-light), var(--opacity-low));
    user-select: none; /* 行番号を選択できないようにする */
  }

  /* レスポンシブ対応 */
  @media (max-width: var(--breakpoint-mobile)) {
    pre[data-line-numbers='true'] :global(.line::before),
    pre[data-line-numbers='1'] :global(.line::before) {
      left: -2.2em;
      width: 1.8em;
    }
  }
</style>
