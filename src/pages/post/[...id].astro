---
import type { GetStaticPaths } from 'astro';
import { getEntry, getCollection, render } from 'astro:content';
import Base from '../../layouts/base.astro';
import Tags from '../../components/Tags.astro';

import H1 from '../../components/markdown/h1.astro';
import H2 from '../../components/markdown/h2.astro';
import H3 from '../../components/markdown/h3.astro';
import H4 from '../../components/markdown/h4.astro';
import H5 from '../../components/markdown/h5.astro';
import H6 from '../../components/markdown/h6.astro';

export const getStaticPaths = (async () => {
  const posts = await getCollection('post', post => post.data.publish);
  return posts.map(post => {
    return {
      params: { id: post.id },
    };
  });
}) satisfies GetStaticPaths;

const post = await getEntry('post', Astro.params.id);

if (post === undefined) {
  return Astro.redirect('/404');
}
const { Content } = await render(post);
---

<Base title={post.data.title}>
  <header>
    <h1>{post.data.title}</h1>
    <p>{post.data.description}</p>
    <Tags tags={post.data.tags} />
  </header>
  <article>
    <Content
      components={{
        h1: H1,
        h2: H2,
        h3: H3,
        h4: H4,
        h5: H5,
        h6: H6,
      }}
    />
  </article>
</Base>

<style>
  header {
    display: grid;
    justify-items: center;
  }

  h1 {
    text-align: center;
  }

  article {
    --astro-code-token-keyword: var(--uchu-red-7);
    --astro-code-token-string-expression: var(--uchu-orange-7);
    --astro-code-token-comment: var(--uchu-gray-7);
    --astro-code-token-function: var(--uchu-purple-7);
  }

  article :global(table) {
    width: 100%;
    column-gap: 0;
    border-spacing: 0;
  }

  article :global(tr) {
    column-gap: 0;
  }

  article :global(thead tr th) {
    border-bottom: 1px var(--uchu-yin-9) solid;
  }

  article :global(td:not(:last-child), th:not(:last-child)) {
    border-inline-end: 1px var(--uchu-yin-9) solid;
  }

  article :global(td, th) {
    padding-inline: 0.2rem;
  }

  article :global(:not(pre) > code) {
    background-color: var(--uchu-gray-2);
    font-family: var(--font-mono);
    padding-inline: 0.1rem;
  }

  article :global(img) {
    width: 100%;
    height: auto;
  }

  article :global(hr) {
    border: none;
    border-top: var(--uchu-yin-9) solid 0.5px;
  }

  article :global(.heading-container) {
    display: inline-flex;
    flex-direction: row;
    align-items: center;
    margin-block-start: 1.5rem;
    gap: 0.5rem;
  }

  article :global(.heading-container h2, h3, h4, h5, h6) {
    margin: 0;
  }

  article :global(.heading-container:hover .heading-anchor) {
    opacity: 1;
  }

  article :global(.heading-anchor) {
    opacity: 0;
    color: var(--uchu-blue-6);
    display: inline-flex;
    transition: opacity 0.1s ease;
  }

  article :global(.heading-anchor svg *) {
    stroke: var(--uchu-blue-6);
    display: inline-flex;
  }

  article :global(figure) {
    margin-inline: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  article :global(figcaption) {
    margin-block-start: 0.5rem;
  }

  article :global(pre *) {
    font-family: var(--font-mono);
  }

  article :global(pre) {
    border: 1px solid var(--uchu-yin-9);
    font-family: IBM Plex Mono;
    white-space: pre;
    display: grid;
    grid-template-columns: auto 1fr;
    max-width: 48rem;
  }

  article :global(pre > code) {
    display: grid;
    grid-template-columns: 1fr;
    overflow-x: scroll;
    margin-inline-start: 0.5rem;
  }

  article :global(.line-number) {
    grid-column: 1;
    text-align: right;
    padding-inline: 0.3rem;
    user-select: none;
  }

  article :global(pre > div.line-numbers) {
    display: grid;
    grid-template-columns: auto;
    border-right: 1px solid var(--uchu-yin-9);
  }
</style>
