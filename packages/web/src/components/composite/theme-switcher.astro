---
import { type Theme, ariaLabel } from "~/lib/theme";
import { Icon } from "astro-icon/components";

export interface Props {
  id: string;
  initial: Theme;
}

const { id, initial } = Astro.props;
---

<theme-switcher id={id} data-initial-theme={initial}>
  <button aria-label={ariaLabel[initial]}>
    <Icon class:list={["icon", "light-icon"]} name="iconoir:sun-light" />
    <Icon class:list={["icon", "dark-icon"]} name="iconoir:half-moon" />
  </button>
</theme-switcher>

<style>
  .icon {
    font-size: var(--font-size-2xl);
    color: var(--fg-strong);
    display: none;
  }

  theme-switcher {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  theme-switcher button {
    cursor: pointer;
  }

  body[data-theme="light"] theme-switcher .light-icon {
    display: block;
  }

  body[data-theme="dark"] theme-switcher .dark-icon {
    display: block;
  }
</style>

<script>
  import type { Theme } from "~/lib/theme";
  import { adapters, ariaLabel } from "~/lib/theme";

  function sanitizeTheme(theme?: string): Theme {
    switch (theme) {
      case "light":
      case "dark":
        return theme;
      default:
        return "light";
    }
  }

  function cycleTheme(theme: Theme): Theme {
    switch (theme) {
      case "dark":
        return "light";
      case "light":
        return "dark";
    }
  }

  function restoreTheme(initial?: string): Theme {
    const saved = localStorage.getItem("theme");
    if (saved) {
      return sanitizeTheme(saved);
    } else {
      const theme = sanitizeTheme(initial);
      localStorage.setItem("theme", theme);
      return theme;
    }
  }

  class ThemeSwitcher extends HTMLElement {
    #button: HTMLButtonElement;

    constructor() {
      super();
      this.#button = this.querySelector("button")!;
      this.#button.addEventListener("click", () => this.#toggleTheme());
      const theme = this.#getTheme();
      for (const adapter of adapters) {
        adapter.init(theme);
      }
      this.#setTheme(theme);
    }

    #setTheme(theme: Theme) {
      document.body.dataset.theme = theme;
      for (const adapter of adapters) {
        adapter.apply(theme);
      }
      this.#button.ariaLabel = ariaLabel[theme];
      localStorage.setItem("theme", theme);
    }

    #getTheme() {
      if (document.body.dataset.theme) {
        return sanitizeTheme(document.body.dataset.theme);
      } else {
        return restoreTheme(this.dataset.initialTheme);
      }
    }

    #toggleTheme() {
      this.#setTheme(cycleTheme(this.#getTheme()));
    }
  }

  customElements.define("theme-switcher", ThemeSwitcher);
</script>
