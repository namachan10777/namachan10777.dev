---
import Base from "@layouts/Base.astro";
import type { GetStaticPaths } from "astro";
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";
import Heading1 from "@components/mdx/heading1.astro";
import { PAGE_SIZE, renderDate } from "@lib/util";
import Tags from "@components/composite/tags.astro";
import Giscus from "@components/composite/giscus.astro";
import MdArticle from "@components/composite/MdArticle.astro";

export const getStaticPaths = (async () => {
  const collection = await getCollection("post", (post) => post.data.publish);
  const posts = collection.map((post) => {
    const matched = /^(\d{4})\/(.+)$/.exec(post.slug)!;
    const year = matched[1];
    const name = matched[2];
    return {
      params: { slug: post.slug },
      props: { year, name },
    };
  });
  return posts;
}) satisfies GetStaticPaths;

const entry = await getEntry("post", Astro.params.slug);
const { Content } = await entry.render();
const pageIndex =
  Math.floor(
    (await getCollection("post", (post) => post.data.publish))
      .sort((a, b) => a.data.date.getTime() - b.data.date.getTime())
      .findIndex((post) => post.slug === entry.slug) / PAGE_SIZE
  ) + 1;
---

<Base
  title={entry.data.title}
  description={entry.data.description}
  imagePath={`post/${entry.slug}.webp`}
  og={{
    type: "article",
    tags: entry.data.tags,
    images: entry.data.images?.map((img) => img.src),
    createdAt: entry.data.date,
    modifiedAt: entry.data.modified || undefined,
  }}
  path={[
    { display: "post", absolute: `/post/page/${pageIndex}` },
    { display: entry.data.title, absolute: `/post/${entry.slug}` },
  ]}
>
  <div>
    <Heading1>
      {entry.data.title}
    </Heading1>
    <div class="timestamp">
      <span class="timestamp-row">
        {renderDate("day", entry.data.date)}
        <span>公開</span>
      </span>
      {
        entry.data.modified && (
          <span class="timestamp-row">
            {renderDate("day", entry.data.modified)}
            <span>更新</span>
          </span>
        )
      }
    </div>
  </div>

  <div class="tags-container">
    <Tags tags={entry.data.tags} />
  </div>
  <MdArticle>
    <Content />
  </MdArticle>
  <Giscus />
</Base>

<style>
  .tags-container {
    margin-block-end: 1.5rem;
  }

  .timestamp {
    display: grid;
    grid-template-columns: auto 1fr;
    column-gap: 0.5rem;
    font-size: var(--font-size-sm);
  }

  .timestamp-row {
    font-family: var(--font-mono);
    color: var(--fg-weak);
    display: contents;
  }
</style>
