@require: list
@require: option

module JsBlog : sig
  val top-document : 'a -> block-text -> string
    constraint 'a :: (|
      title : inline-text;
    |)

   val article-document : 'a -> block-text -> string
    constraint 'a :: (|
      title : inline-text;
      date : inline-text;
      id : string;
    |)

  direct +listing    : [itemize]                  block-cmd
  direct +address    : [block-text]               block-cmd
  direct +p          : [inline-text]              block-cmd
  direct +img        : [string?; string?; string] block-cmd
  direct +section    : [inline-text; block-text]  block-cmd
  direct +subsection : [inline-text; block-text]  block-cmd
  direct +code       : [string?;string?;string]           block-cmd
  direct \code       : [string]                   inline-cmd
  direct \a          : [string; inline-text]      inline-cmd
end = struct
  let concat = List.fold-left (^) ` `

  let make-props props =
  props |> List.fold-left (fun sacc (k, v) -> (
    sacc ^ #` `# ^ k ^ `="` ^ v ^ `"`
  )) ` `

  let-rec join sep l = (match l with
    | x :: [] -> x :: []
    | x :: xs -> x :: sep :: join sep xs
    | [] -> [])


  let replace from to target =
    let splitter = regexp-of-string from in
    let splited = split-on-regexp splitter target
      |> List.map (fun (_, s) -> s)
    in
    join to splited
    |> concat

  let html-quote s =
    s
    |> replace `&` `&amp;`
    |> replace `<` `&lt;`
    |> replace `>` `&gt;`

  let tag ?:propsopt ?:bropt tinfo s sf =
    let props = Option.from [] propsopt in
    let br = Option.from true bropt in
      `<` ^ s ^ (make-props props) ^ `>` ^ (if br then break tinfo else ` `)
      ^ (sf tinfo)
      ^ (if br then break tinfo else ` `) ^ `</ ` ^ s ^ `>`

  let stag ?:propsopt ?:bropt tinfo s =
    let props = Option.from [] propsopt in
    let br = Option.from true bropt in
    `<` ^ s ^ (make-props props) ^ #` />` ^ (if br then break tinfo else ` `)

  let gen-link rel href =
    `<link ` ^ (make-props [(`rel`, rel); (`href`, href)]) ^ #` />`

  let document r f =
    let tinfo = get-initial-text-info () in
      concat [
        `<?xml version="1.0" encoding="UTF-8"?>` ^ (break tinfo);
        `<!DOCTYPE html>` ^ (break tinfo);
        tag ?:[(`xmlns`, `http://www.w3.org/1999/xhtml`); (`lang`, `ja`)] tinfo `html` (fun tinfo ->
          concat [
              tag tinfo `head` (fun tinfo ->
                `<meta name="twitter:card" content="summary" />` ^ (break tinfo) ^
                `<meta name="twitter:site" content="@namachan10777" />` ^ (break tinfo) ^
                `<meta name="twitter:creator" content="@namachan10777" />` ^ (break tinfo) ^
                `<meta name="og:title" content="namachan10777" />` ^ (break tinfo) ^
                `<meta name="og:description" content="`^ (stringify-inline tinfo r#title) ^`"/>` ^ (break tinfo) ^
                `<meta property="og:type" />` ^ (break tinfo) ^
                `<meta property="og:image" content="./res/icon.jpg"/>` ^ (break tinfo) ^
                `<meta property="og:url" content="https://namachan10777.dev/`^ r#id ^ `.xhtml"/>` ^ (break tinfo) ^
                tag tinfo `title` (fun tinfo -> stringify-inline tinfo r#title) ^
                (r#links
                |> List.map (fun (rel, href) -> stag ?:[(`rel`, rel); (`href`, href)] ?:true tinfo `link`)
                |> concat) ^
                (r#scripts
                |> List.map (fun (src) -> tag ?:[(`src`, src); (`type`, `text/javascript`)] ?:false tinfo `script` (fun _ -> ` `))
                |> concat)
              ) ^ (break tinfo);
              tag tinfo `body` (fun tinfo ->
                tag ?:[(`id`, `root`)] tinfo `div` (fun tinfo -> f tinfo));
            ])
      ]

  let-rec listing-item tinfo depth (Item(parent, children)) =
    let str-parent = tag ?* ?:false tinfo `li` (fun tinfo ->
      stringify-inline tinfo parent)
    in
    if List.length children > 0
    then
      concat
        [str-parent ^ (break tinfo);
        tag ?* ?:false tinfo `ul` (fun tinfo -> 
          concat (List.map (listing-item tinfo (depth + 1)) children));
        (break tinfo);]
    else
      str-parent ^ (break tinfo)

  let listing tinfo (Item(_,itmzlst)) =
    tag ?* ?:false tinfo `ul` (fun tinfo ->
      List.map (listing-item tinfo 0) itmzlst
      |> concat)

  let-block tinfo +listing item =
    listing tinfo item

  let-block tinfo +p it =
    tag ?* ?:false tinfo `p` (fun tinfo -> stringify-inline tinfo it) ^ (break tinfo)

  let-block tinfo +img ?:alt ?:id src =
    let alt =
      alt
      |> Option.map (fun alt -> `alt="` ^ alt ^ `"`)
      |> Option.from ` `
    in
    let id =
     id 
      |> Option.map (fun id -> `id="` ^ id ^ `"`)
      |> Option.from ` `
    in
    `<img src="` ^ src ^ `" `# ^ alt ^ #` `# ^ id ^ `/>` ^ (break tinfo)

  let-block tinfo +address bt =
    tag ?* ?:false tinfo `address` (fun tinfo -> stringify-block tinfo bt) ^ (break tinfo)

  let-inline tinfo \a href it =
    tag ?:[(`href`, href)] ?:false tinfo `a` (fun tinfo -> stringify-inline tinfo it)

  let-block tinfo +section heading bt =
    let st-heading = tag ?* ?:false tinfo `header`
      (fun tinfo ->
        tag ?:[(`class`, `heading`)] ?:false tinfo `h2`
          (fun tinfo -> stringify-inline tinfo heading))
    in
    tag ?* ?:false tinfo `section`
      (fun tinfo -> st-heading ^ (break tinfo) ^ stringify-block tinfo bt)

  let-block tinfo +subsection heading bt =
    let st-heading = tag ?* ?:false tinfo `header`
      (fun tinfo ->
        tag ?:[(`class`, `heading`)] ?:false tinfo `h3`
          (fun tinfo -> stringify-inline tinfo heading))
    in
    tag ?* ?:false tinfo `section`
      (fun tinfo -> st-heading ^ (break tinfo) ^ stringify-block tinfo bt)

  let-inline tinfo \code s =
    tag ?:[(`class`, `code`)] ?:false tinfo `span` (fun _ -> html-quote s)

  let remove-heading-break-line s =
    (match string-explode s with
    | 10 :: xs -> string-unexplode xs
    | _ -> s)

  let-block tinfo +code ?:language ?:title st =
    let lang = Option.from ` ` language in
    let code-quote st = 
      tag ?:[(`class`, `code-block`)] ?:false tinfo `pre` (fun _ ->
        tag ?:[(`class`, `code `# ^ `language-` ^ lang)] ?:false tinfo `code` (fun _ -> remove-heading-break-line st))
    in
    let title =
      Option.map code-quote title
      |> Option.from ` `
    in
    title ^ code-quote (st |> html-quote)

  let-block tinfo +header it =
    tag ?* ?:false tinfo `header` (fun tinfo -> stringify-inline tinfo it) ^ (break tinfo)

  let-block tinfo +footer it =
    tag ?* ?:false tinfo `header` (fun tinfo -> stringify-inline tinfo it) ^ (break tinfo)

  let index-links = [
    (`stylesheet`, `https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&amp;display=swap`);
    (`stylesheet`, `https://fonts.googleapis.com/css2?family=Fira+Mono&amp;display=swap`);
    (`stylesheet`, `3rdparty/prism.css`);
    (`stylesheet`, `index.css`);
  ]

  let article-links = [
    (`stylesheet`, `https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&amp;display=swap`);
    (`stylesheet`, `https://fonts.googleapis.com/css2?family=Fira+Mono&amp;display=swap`);
    (`stylesheet`, `../3rdparty/prism.css`);
    (`stylesheet`, `../index.css`);
  ]

  let index-scripts = [
    (`3rdparty/prism.js`);
  ]

  let article-scripts = [
    (`../3rdparty/prism.js`);
  ]

  let top-document r bt =
    document (|
      links = index-links;
      scripts = index-scripts;
      title = r#title;
      id = `index`;
    |) (fun tinfo -> (
      let heading = tag ?* ?:false tinfo `header` (fun tinfo ->
        concat
          [tag ?* ?:false tinfo `h1` (fun tinfo -> `namachan10777`);]
      )
      in
      heading ^
       stringify-block tinfo bt
    ))

  let article-document r bt =
    document (|
      links = article-links;
      scripts = article-scripts;
      title = r#title;
      id = r#id;
    |) (fun tinfo -> (
      let heading = tag ?* ?:false tinfo `header` (fun tinfo ->
        concat
          [stringify-inline tinfo {\a (`../index.xhtml`) {topへ}};
          tag ?* ?:false tinfo `div` (fun tinfo -> stringify-inline tinfo r#date);
          tag ?* ?:false tinfo `h1` (fun tinfo -> stringify-inline tinfo r#title);]
      )
      in
      heading ^
      (stringify-block tinfo '<
        #bt;
        +footer {
          \a (`../index.xhtml`) {topへ}
        }
      >)))
end
